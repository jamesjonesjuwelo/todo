// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User Actions List Component renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserActionsListComponent
    getUserActions={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    toggleUserActionsOverlay={[MockFunction]}
    userActions={
      Array [
        Object {
          "description": "Test Description",
          "id": 1,
          "type": "Test type",
        },
        Object {
          "description": "Test2 Description",
          "id": 2,
          "type": "Test2 type",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <styled.div>
        <IconComponent
          method={[Function]}
          src="/icons/cross.png"
          styles="
  position: absolute;
  right: 10px;
  top: 10px;
  width: 25px;
  height: 25px;
  cursor: pointer;
  opacity: 0.5;
  
  :hover {
    opacity: 1;
  }
"
        />
        <div
          className="user-actions-container"
        >
          <userActionComponent
            userAction={
              Object {
                "description": "Test Description",
                "id": 1,
                "type": "Test type",
              }
            }
          />
          <userActionComponent
            userAction={
              Object {
                "description": "Test2 Description",
                "id": 2,
                "type": "Test2 type",
              }
            }
          />
        </div>
      </styled.div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <IconComponent
            method={[Function]}
            src="/icons/cross.png"
            styles="
  position: absolute;
  right: 10px;
  top: 10px;
  width: 25px;
  height: 25px;
  cursor: pointer;
  opacity: 0.5;
  
  :hover {
    opacity: 1;
  }
"
          />,
          <div
            className="user-actions-container"
          >
            <userActionComponent
              userAction={
                Object {
                  "description": "Test Description",
                  "id": 1,
                  "type": "Test type",
                }
              }
            />
            <userActionComponent
              userAction={
                Object {
                  "description": "Test2 Description",
                  "id": 2,
                  "type": "Test2 type",
                }
              }
            />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "method": [Function],
            "src": "/icons/cross.png",
            "styles": "
  position: absolute;
  right: 10px;
  top: 10px;
  width: 25px;
  height: 25px;
  cursor: pointer;
  opacity: 0.5;
  
  :hover {
    opacity: 1;
  }
",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <userActionComponent
                userAction={
                  Object {
                    "description": "Test Description",
                    "id": 1,
                    "type": "Test type",
                  }
                }
              />,
              <userActionComponent
                userAction={
                  Object {
                    "description": "Test2 Description",
                    "id": 2,
                    "type": "Test2 type",
                  }
                }
              />,
            ],
            "className": "user-actions-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "userAction-1",
              "nodeType": "function",
              "props": Object {
                "userAction": Object {
                  "description": "Test Description",
                  "id": 1,
                  "type": "Test type",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "userAction-2",
              "nodeType": "function",
              "props": Object {
                "userAction": Object {
                  "description": "Test2 Description",
                  "id": 2,
                  "type": "Test2 type",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <styled.div>
          <IconComponent
            method={[Function]}
            src="/icons/cross.png"
            styles="
  position: absolute;
  right: 10px;
  top: 10px;
  width: 25px;
  height: 25px;
  cursor: pointer;
  opacity: 0.5;
  
  :hover {
    opacity: 1;
  }
"
          />
          <div
            className="user-actions-container"
          >
            <userActionComponent
              userAction={
                Object {
                  "description": "Test Description",
                  "id": 1,
                  "type": "Test type",
                }
              }
            />
            <userActionComponent
              userAction={
                Object {
                  "description": "Test2 Description",
                  "id": 2,
                  "type": "Test2 type",
                }
              }
            />
          </div>
        </styled.div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <IconComponent
              method={[Function]}
              src="/icons/cross.png"
              styles="
  position: absolute;
  right: 10px;
  top: 10px;
  width: 25px;
  height: 25px;
  cursor: pointer;
  opacity: 0.5;
  
  :hover {
    opacity: 1;
  }
"
            />,
            <div
              className="user-actions-container"
            >
              <userActionComponent
                userAction={
                  Object {
                    "description": "Test Description",
                    "id": 1,
                    "type": "Test type",
                  }
                }
              />
              <userActionComponent
                userAction={
                  Object {
                    "description": "Test2 Description",
                    "id": 2,
                    "type": "Test2 type",
                  }
                }
              />
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "method": [Function],
              "src": "/icons/cross.png",
              "styles": "
  position: absolute;
  right: 10px;
  top: 10px;
  width: 25px;
  height: 25px;
  cursor: pointer;
  opacity: 0.5;
  
  :hover {
    opacity: 1;
  }
",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <userActionComponent
                  userAction={
                    Object {
                      "description": "Test Description",
                      "id": 1,
                      "type": "Test type",
                    }
                  }
                />,
                <userActionComponent
                  userAction={
                    Object {
                      "description": "Test2 Description",
                      "id": 2,
                      "type": "Test2 type",
                    }
                  }
                />,
              ],
              "className": "user-actions-container",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": "userAction-1",
                "nodeType": "function",
                "props": Object {
                  "userAction": Object {
                    "description": "Test Description",
                    "id": 1,
                    "type": "Test type",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": "userAction-2",
                "nodeType": "function",
                "props": Object {
                  "userAction": Object {
                    "description": "Test2 Description",
                    "id": 2,
                    "type": "Test2 type",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
